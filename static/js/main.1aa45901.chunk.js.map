{"version":3,"sources":["actions/cards.js","index.js","containers/Columns.js","App.js","reducers/columns.js","reducers/index.js","store.js","actions/columns.js","components/Card/index.jsx","containers/Card.js","components/Column/index.jsx","components/Button/index.jsx","components/AddForm/index.jsx","containers/AddForm.js","assets/add.svg","assets/сlear.svg"],"names":["__webpack_exports__","addCard","columnIndex","text","type","payload","removeCard","cardIndex","reorderCards","_ref","sourceColumnId","destinationColumnId","sourceIndex","destinationIndex","Component","mapActionsToProps","Object","objectSpread","columnsActions","cardsActions","connect","_ref2","items","columns","addColumn","removeColumn","react_default","a","createElement","react","react_beautiful_dnd_esm","onDragEnd","result","source","destination","droppableId","index","map","item","Column","assign","AddCard","onRemoveColumn","key","onReorder","onRemoveCard","onAddCard","App","className","containers_Columns","React","initialState","title","cards","combineReducers","state","arguments","length","undefined","action","concat","toConsumableArray","filter","Array","from","_result$splice","splice","removed","slicedToArray","slice","sourceColumn","removedCard","destinationColumn","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","document","getElementById","name","Card","children","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","onClick","bind","src","ClearSvg","alt","global","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_containers_Card__WEBPACK_IMPORTED_MODULE_1__","_containers_AddForm__WEBPACK_IMPORTED_MODULE_2__","assets_lear_svg__WEBPACK_IMPORTED_MODULE_3__","assets_lear_svg__WEBPACK_IMPORTED_MODULE_3___default","react_beautiful_dnd__WEBPACK_IMPORTED_MODULE_4__","confirm","droppableProps","card","placeholder","isEmptyColumn","Button","AddForm","valueForCard","setValueForCard","showForm","setShowForm","textareaRef","onAdd","rows","onChange","e","target","value","components_Button","AddSvg","_useState","useState","_useState2","useRef","_useState3","_useState4","useEffect","current","focus","components_AddForm","module","exports","p"],"mappings":"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","file":"static/js/main.1aa45901.chunk.js","sourcesContent":["export default {\r\n  addCard: (columnIndex, text) => ({\r\n    type: 'CARDS:ADD',\r\n    payload: {\r\n      columnIndex,\r\n      text\r\n    }\r\n  }),\r\n\r\n  removeCard: (columnIndex, cardIndex) => ({\r\n    type: 'CARDS:REMOVE',\r\n    payload: {\r\n      columnIndex,\r\n      cardIndex\r\n    }\r\n  }),\r\n\r\n  reorderCards: ({sourceColumnId, destinationColumnId, sourceIndex, destinationIndex}) => ({\r\n    type: 'CARDS:REORDER',\r\n    payload: {\r\n      sourceIndex,\r\n      destinationIndex,\r\n      sourceColumnId,\r\n      destinationColumnId \r\n    }\r\n  })\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nimport './index.scss';\n\nconst render = Component => {\n  ReactDOM.render(\n  <Provider store={store}>\n    <Component />\n  </Provider>,\n  document.getElementById('root')\n  );\n}\n\nrender(App);\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default;\n    render(NextApp);\n  })\n}\n\n","import React, {Fragment} from 'react';\r\nimport Column from '../components/Column';\r\nimport {connect} from 'react-redux';\r\nimport columnsActions from '../actions/columns';\r\nimport cardsActions from '../actions/cards';\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\n\r\nconst Columns = ({\r\n    items, \r\n    addColumn, \r\n    addCard, \r\n    removeColumn, \r\n    reorderCards, \r\n    removeCard\r\n  }) => {\r\n    \r\n  const onDragEnd = (result) => {\r\n    const {source, destination} = result;\r\n\r\n    if (\r\n      !destination ||\r\n      (source.droppableId === destination.droppableId &&\r\n        source.index === destination.index)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    reorderCards({\r\n      sourceIndex: source.index,\r\n      destinationIndex: destination.index,\r\n      sourceColumnId: source.droppableId,\r\n      destinationColumnId: destination.droppableId,\r\n    });\r\n    \r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <DragDropContext onDragEnd={onDragEnd}> \r\n        {items.map( (item, index) => (\r\n          <Column \r\n            {...item} \r\n            addColumn={addColumn} \r\n            columnIndex={index}\r\n            AddCard={addCard}\r\n            onRemoveColumn={removeColumn}\r\n            key={index} \r\n            onReorder={reorderCards}\r\n            onRemoveCard={removeCard}\r\n          />\r\n        ))}\r\n      </DragDropContext>\r\n      \r\n      <Column addColumn={addColumn} onAddCard={addCard} />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({columns}) => ({\r\n  items: columns\r\n});\r\n\r\nconst mapActionsToProps = {\r\n  ...columnsActions,\r\n  ...cardsActions\r\n};\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(Columns);","import React from 'react';\nimport Columns from './containers/Columns';\n\nimport './App.scss';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Columns />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const initialState = [\r\n  {\r\n    title: \"Планы на месяц\",\r\n    cards: [\r\n      'Съездить на море',\r\n      'Разработка новостного блога',\r\n      'Бегать по утрам каждые нечетные дни недели',\r\n      'Уделять по 3 часа изучению Реакта',\r\n      'Найти работу на позицию Junior Front-end developer',\r\n      'Изучать NodeJs',\r\n      '2 часа каждый день на изучение Английского',\r\n    ]\r\n  },\r\n\r\n  {\r\n    title: \"Планы на Понедельник\",\r\n    cards: [\r\n      'Утренная пробежка',\r\n      'Поехать в магазин за продуктами',\r\n      'Чтение \"Совершенный код\"',\r\n      'Посмотреть фильм \"Кто я\"',\r\n    ]\r\n  },\r\n];\r\n\r\nexport default (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case 'CARDS:ADD':\r\n      return state.map( (item, index) => {\r\n          if (action.payload.columnIndex === index) {\r\n            return {\r\n              ...item,\r\n              cards: [\r\n                ...item.cards,\r\n                action.payload.text\r\n              ]\r\n            }\r\n          }\r\n\r\n          return item;\r\n      });\r\n\r\n      case 'CARDS:REMOVE':\r\n        return state.map( (item, index) => {\r\n            if (action.payload.columnIndex === index) {\r\n              return {\r\n                ...item,\r\n                cards: item.cards.filter( (item, index) => {\r\n                  return !(index === action.payload.cardIndex);\r\n                }),\r\n              }\r\n            }\r\n            return item;\r\n        });\r\n      \r\n    case 'COLUMNS:ADD':\r\n      return [\r\n        ...state,\r\n        {\r\n          title: action.payload,\r\n          cards: []\r\n        }\r\n      ];\r\n\r\n    case 'COLUMNS:REMOVE':\r\n      return state.filter( (item, index) => {\r\n        return action.payload !== index; \r\n      });\r\n\r\n    case 'CARDS:REORDER': \r\n      if (action.payload.sourceColumnId === action.payload.destinationColumnId) {\r\n        return state.map( (item, index) => {\r\n          if (action.payload.sourceColumnId === `column-${index}`) {\r\n            const result = Array.from(item.cards);\r\n            const [removed] = result.splice(action.payload.sourceIndex, 1);\r\n            result.splice(action.payload.destinationIndex, 0, removed);\r\n            return {\r\n              title: item.title,\r\n              cards: result\r\n            }\r\n          }\r\n            return item;\r\n        });\r\n      } else {\r\n        const destinationColumnId = action.payload.destinationColumnId.slice(7);\r\n        const sourceColumnId = action.payload.sourceColumnId.slice(7);\r\n\r\n        const sourceColumn = Array.from(state[sourceColumnId].cards);\r\n        const removedCard = sourceColumn.splice(action.payload.sourceIndex, 1);\r\n\r\n        const destinationColumn = Array.from(state[destinationColumnId].cards);\r\n        destinationColumn.splice(action.payload.destinationIndex, 0, removedCard[0]);\r\n\r\n        return state.map( (item, index) => { \r\n          if (action.payload.sourceColumnId === `column-${index}`) {\r\n            return {\r\n              title: item.title,\r\n              cards: sourceColumn\r\n            }\r\n          }\r\n\r\n          if (action.payload.destinationColumnId === `column-${index}`) {\r\n            return {\r\n              title: item.title,\r\n              cards: destinationColumn\r\n            }\r\n          } \r\n\r\n          return item;\r\n        });\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n","import {combineReducers} from 'redux';\r\nimport columns from './columns';\r\n\r\nexport default combineReducers({\r\n  columns\r\n});","import {createStore} from 'redux';\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;","export default {\r\n  addColumn: name => ({\r\n    type: 'COLUMNS:ADD',\r\n    payload: name\r\n  }),\r\n  removeColumn: index => ({\r\n    type: 'COLUMNS:REMOVE',\r\n    payload: index\r\n  }),\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport ClearSvg from 'assets/сlear.svg';\r\n\r\nimport './Card.scss';\r\n\r\nconst Card = ({cardIndex, children, columnIndex, removeCard}) => {\r\n  return typeof cardIndex !== \"undefined\" ? (\r\n    <Draggable \r\n      key={cardIndex} \r\n      draggableId={`card-${columnIndex}-${cardIndex}`} \r\n      index={cardIndex}\r\n    >\r\n      {(provided, snapshot) => (\r\n        <div \r\n          className=\"card\"\r\n          key={cardIndex}\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}  \r\n        >\r\n          <div className=\"card__text\">\r\n            {children}          \r\n          </div>\r\n          <img onClick={removeCard.bind(this, columnIndex, cardIndex )} \r\n              className=\"card__button\" \r\n              src={ClearSvg} \r\n              alt=\"Clear button icon\" \r\n            />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  ) : (\r\n    <div className=\"card\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nCard.propTypes = {\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.node\r\n  ]).isRequired\r\n};\r\n\r\nexport default Card;","import {connect} from 'react-redux';\r\nimport Card from '../components/Card';\r\nimport cardsActions from '../actions/cards';\r\n\r\nconst mapActionsToProps = {\r\n  ...cardsActions\r\n};\r\n\r\nconst mapStateToProps = ({columns}) => ({\r\n  items: columns\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(Card);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '../../containers/Card';\r\nimport AddForm from '../../containers/AddForm';\r\nimport ClearSvg from 'assets/сlear.svg';\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\n\r\nimport './Column.scss';\r\n\r\nconst Column = ({\r\n  columnIndex, \r\n  title, \r\n  cards, \r\n  onRemoveColumn, \r\n}) => {\r\n    \r\n  const removeColumn = () => {\r\n    if (global.confirm('Вы действительно хотите удалить?')) {\r\n      onRemoveColumn(columnIndex);\r\n    }\r\n  };\r\n\r\n  return cards ? (\r\n    <Droppable type=\"CARDS\" droppableId={`column-${columnIndex}`}>\r\n      {(provided) => ( \r\n        <div\r\n          className=\"column\"\r\n          ref={provided.innerRef}\r\n          {...provided.droppableProps}\r\n        >\r\n          <div className=\"column__inner\">\r\n            { title && (\r\n              <div className='column__title'>\r\n                <b>{title}</b>\r\n                <div onClick={removeColumn} className=\"remove-btn\">\r\n                  <img src={ClearSvg} alt=\"Clear svg icon\" />\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            { cards && \r\n              <div className=\"column__items\"> \r\n                {cards.map((card, index) => (\r\n                  <Card key={index} columnIndex={columnIndex} cardIndex={index}>\r\n                    {card}\r\n                  </Card>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            }\r\n\r\n            <AddForm \r\n              columnIndex={columnIndex} \r\n              isEmptyColumn={!cards} \r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Droppable>\r\n  ) : (\r\n    <div className={\"column column--empty\"}>\r\n      <div className=\"column__inner\">\r\n        <AddForm\r\n          isEmptyColumn={true}\r\n          columnIndex={columnIndex}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nColumn.propTypes = {\r\n  cards: PropTypes.node,\r\n  title: PropTypes.string\r\n};\r\n\r\nexport default Column;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Button.scss';\r\n\r\nconst Button = ({children, onClick}) => {\r\n  return (\r\n    <button className='button'\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.node\r\n  ]).isRequired,\r\n  onClick: PropTypes.func\r\n};\r\n\r\n\r\nexport default Button;","import React, {Fragment} from 'react';\r\nimport Card from '../../containers/Card';\r\nimport Button from '../Button';\r\nimport AddSvg from 'assets/add.svg';\r\nimport ClearSvg from 'assets/сlear.svg';\r\n\r\nimport './AddForm.scss';\r\n\r\nconst AddForm = ({\r\n  valueForCard, \r\n  setValueForCard, \r\n  showForm,\r\n  setShowForm, \r\n  textareaRef, \r\n  isEmptyColumn, \r\n  onAdd\r\n}) => {\r\n  return (\r\n    <Fragment> \r\n      { showForm ? (\r\n        <div className=\"add-form\">\r\n          <div className=\"add-form__input\">\r\n            <Card>\r\n              <textarea placeholder={isEmptyColumn ? \"Введите название колонки\" : \"Введите текст карточки\"} \r\n                ref={textareaRef} rows=\"3\"\r\n                onChange={e => setValueForCard(e.target.value)}\r\n                value={valueForCard}\r\n              />\r\n            </Card>\r\n            <div className=\"add-form__button-add\">\r\n              <Button onClick={onAdd}>\r\n                {isEmptyColumn ? \"Добавить колонку\" : \"Добавить карточку\"}\r\n              </Button>\r\n              <img onClick={setShowForm.bind(this, false)} \r\n                className=\"add-form__button-clear\" \r\n                src={ClearSvg} \r\n                alt=\"Clear button icon\" \r\n              />\r\n            </div>\r\n          </div>\r\n        </div> \r\n      ) : (\r\n        <div className=\"add-form add-form__button\"> \r\n          <div className=\"add-form__button-show\">\r\n          <div className=\"add-form__button-add-btn\">\r\n            <img src={AddSvg} alt=\"Add button icon\" />\r\n            <span onClick={setShowForm.bind(this, true)}>\r\n              {isEmptyColumn ? \"Добавить еще одну колонку\" : \"Добавить еще одну карточку\"}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default AddForm;","import React, {useState, useRef, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AddFormComponent from '../components/AddForm';\r\nimport {connect} from 'react-redux';\r\nimport columnsActions from '../actions/columns';\r\nimport cardsActions from '../actions/cards';\r\n\r\nconst AddForm = ({columnIndex, isEmptyColumn, addColumn, addCard}) => {\r\n  const [showForm, setShowForm] = useState(false);\r\n  const textareaRef = useRef(null);\r\n  const [valueForCard, setValueForCard] = useState(\"\");\r\n  \r\n  useEffect( () => {\r\n    if (textareaRef.current) {\r\n      textareaRef.current.focus();\r\n    }\r\n  }, [showForm]);\r\n\r\n  const onAdd = () => {\r\n    if (isEmptyColumn) {\r\n      let textForColumn = valueForCard ? valueForCard : 'Нет названия';\r\n      addColumn(textForColumn);\r\n    } else {\r\n      addCard(columnIndex, valueForCard);\r\n    }\r\n    \r\n    setValueForCard('');\r\n    setShowForm(false);\r\n  }\r\n\r\n  return (\r\n    <AddFormComponent\r\n      showForm={showForm}\r\n      setShowForm={setShowForm}\r\n      textareaRef={textareaRef}\r\n      valueForCard={valueForCard}\r\n      setValueForCard={setValueForCard}\r\n      onAdd={onAdd}\r\n\r\n      isEmptyColumn={isEmptyColumn} \r\n    />\r\n  );\r\n}\r\n\r\n\r\nconst mapStateToProps = ({columns}) => ({\r\n  items: columns\r\n});\r\n\r\nconst mapActionsToProps = {\r\n  ...columnsActions,\r\n  ...cardsActions\r\n};\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(AddForm);","module.exports = __webpack_public_path__ + \"static/media/add.6cb6e5fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/сlear.5fe0db66.svg\";"],"sourceRoot":""}